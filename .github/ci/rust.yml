name: Rust CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always

jobs:

  # Run Clippy (lint)
  lint:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: clippy

    - name: Cache Cargo
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
        key: ${{ runner.os }}-cargo-clippy-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-clippy

    # OS-specific shell
    - name: Run Clippy (bash)
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run Clippy (pwsh)
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Run rustfmt
  fmt:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt

    - name: Run rustfmt (bash)
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: cargo fmt --all -- --check

    - name: Run rustfmt (pwsh)
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: cargo fmt --all -- --check

  # Build and test Rust
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo + Target
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build

    - name: Build (bash)
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: cargo build --verbose

    - name: Build (pwsh)
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: cargo build --verbose

    - name: Test (bash)
      if: ${{ runner.os != 'Windows' }}
      shell: bash
      run: cargo test --verbose

    - name: Test (pwsh)
      if: ${{ runner.os == 'Windows' }}
      shell: pwsh
      run: cargo test --verbose
