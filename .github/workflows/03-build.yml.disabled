name: 03 - Build

on:
  workflow_dispatch:
    inputs:
      triggered_by:
        description: 'Workflow that triggered this run'
        required: false
        default: 'manual'
        type: string
      validation_run_id:
        description: 'Run ID of the validation workflow'
        required: false
        type: string
      testing_run_id:
        description: 'Run ID of the testing workflow'
        required: false
        type: string
      skip_cache:
        description: 'Skip cache and run fresh build'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      triggered_by:
        description: 'Workflow that triggered this run'
        required: false
        default: 'manual'
        type: string
      validation_run_id:
        description: 'Run ID of the validation workflow'
        required: false
        type: string
      testing_run_id:
        description: 'Run ID of the testing workflow'
        required: false
        type: string
      skip_cache:
        description: 'Skip cache and run fresh build'
        required: false
        default: false
        type: boolean
    outputs:
      build_status:
        description: 'Overall build status'
        value: ${{ jobs.build-summary.outputs.status }}
      build_artifacts:
        description: 'Build artifacts path'
        value: ${{ jobs.build-summary.outputs.artifacts }}

permissions:
  contents: read
  actions: write
  packages: write
  id-token: write
  attestations: write

env:
  CARGO_TERM_COLOR: always
  PYTHONIOENCODING: utf-8
  RUST_BACKTRACE: 1

jobs:
  prerequisites-check:
    name: Check Prerequisites
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.check.outputs.ready }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Check if pipeline is ready for build
      id: check
      run: |
        echo "Checking if pipeline is ready for build phase..."
        
        if python scripts/workflow-orchestrator.py check --phase build; then
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "Pipeline is ready for build"
        else
          echo "ready=false" >> $GITHUB_OUTPUT
          echo "Pipeline is NOT ready for build"
          echo "Prerequisites not met. Validation and testing phases must complete successfully first."
          exit 1
        fi

  build-matrix:
    name: Build Artifacts
    needs: prerequisites-check
    if: needs.prerequisites-check.outputs.ready == 'true'
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos-arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache Rust dependencies
      if: ${{ !inputs.skip_cache }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.target }}-
          ${{ runner.os }}-cargo-build-
          ${{ runner.os }}-cargo-

    - name: Cache Python dependencies
      if: ${{ !inputs.skip_cache }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python*/site-packages
        key: ${{ runner.os }}-python-build-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-python-build-
          ${{ runner.os }}-python-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin build twine

    - name: Initialize workflow orchestrator (Ubuntu only)
      if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
      run: |
        python scripts/workflow-orchestrator.py start --phase build

    - name: Run comprehensive build
      id: building
      run: |
        echo "Starting build phase on ${{ matrix.platform }} for ${{ matrix.target }}..."
        
        # Run build with our script
        if python scripts/build-runner.py --root . --platform ${{ matrix.platform }} --target ${{ matrix.target }}; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Build completed successfully on ${{ matrix.platform }}"
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "Build failed on ${{ matrix.platform }}"
          exit 1
        fi

    - name: Generate build provenance
      if: steps.building.outputs.status == 'success'
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: |
          dist/*.whl
          dist/*.tar.gz
          target/release/libgraphbit*
          target/${{ matrix.target }}/release/libgraphbit*

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.platform }}-${{ matrix.target }}-${{ github.run_id }}
        path: |
          dist/
          target/release/libgraphbit*
          target/${{ matrix.target }}/release/libgraphbit*
          .github/artifacts/build-report-*.json
          target/doc/
        retention-days: 30

    - name: Upload wheels to artifacts (for release)
      if: steps.building.outputs.status == 'success' && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.platform }}-${{ matrix.target }}
        path: dist/*.whl
        retention-days: 90

  build-summary:
    name: Build Summary
    needs: build-matrix
    if: always()
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.summary.outputs.status }}
      artifacts: ${{ steps.summary.outputs.artifacts }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Download all build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: build-artifacts-*
        path: ./build-results
        merge-multiple: true

    - name: Generate build summary
      id: summary
      run: |
        echo "Generating build summary..."
        
        # Check if all matrix jobs succeeded
        if [ "${{ needs.build-matrix.result }}" = "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "All build matrix jobs completed successfully"
          
          # List built artifacts
          echo "Built artifacts:"
          find ./build-results -type f -name "*.whl" -o -name "*.tar.gz" -o -name "libgraphbit*" | head -20
          
          # Mark phase as complete
          python scripts/workflow-orchestrator.py complete --phase build --success --artifacts "./build-results"
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "Some build matrix jobs failed"
          
          # Mark phase as failed
          python scripts/workflow-orchestrator.py complete --phase build --error "Some build matrix jobs failed"
        fi
        
        echo "artifacts=./build-results" >> $GITHUB_OUTPUT

    - name: Verify build artifacts
      if: steps.summary.outputs.status == 'success'
      run: |
        echo "Verifying build artifacts..."
        
        # Check for expected artifacts
        wheel_count=$(find ./build-results -name "*.whl" | wc -l)
        sdist_count=$(find ./build-results -name "*.tar.gz" | wc -l)
        lib_count=$(find ./build-results -name "libgraphbit*" | wc -l)
        
        echo "Found artifacts:"
        echo "  - Wheels: $wheel_count"
        echo "  - Source distributions: $sdist_count"
        echo "  - Libraries: $lib_count"
        
        if [ $wheel_count -eq 0 ] && [ $sdist_count -eq 0 ] && [ $lib_count -eq 0 ]; then
          echo "❌ No artifacts found!"
          exit 1
        else
          echo "✅ Build artifacts verified"
        fi

    - name: Generate build summary
      if: always()
      run: |
        echo "## 🔨 Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.summary.outputs.status }}" = "success" ]; then
          echo "✅ **All builds completed successfully!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Some builds failed**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: 03-build" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ steps.summary.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ inputs.triggered_by || 'manual' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Validation Run ID**: ${{ inputs.validation_run_id || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Testing Run ID**: ${{ inputs.testing_run_id || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifacts**: ${{ steps.summary.outputs.artifacts }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        
        # Show artifact summary
        if [ "${{ steps.summary.outputs.status }}" = "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Built Artifacts" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          find ./build-results -type f \( -name "*.whl" -o -name "*.tar.gz" -o -name "libgraphbit*" \) -exec basename {} \; | sort >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        # Show pipeline status
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Pipeline Status" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        python scripts/workflow-orchestrator.py status >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  trigger-next-phase:
    name: Trigger Release Phase
    needs: build-summary
    if: needs.build-summary.outputs.status == 'success' && github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Trigger release workflow
      uses: actions/github-script@v7
      with:
        script: |
          const result = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: '04-release.yml',
            ref: context.ref,
            inputs: {
              triggered_by: 'build',
              validation_run_id: '${{ inputs.validation_run_id }}',
              testing_run_id: '${{ inputs.testing_run_id }}',
              build_run_id: '${{ github.run_id }}'
            }
          });
          
          console.log('Triggered release workflow:', result.status);

    - name: Update pipeline status
      run: |
        echo "Build phase completed successfully"
        echo "Next phase: Release"
        echo "Triggered release workflow for ref: ${{ github.ref }}"
