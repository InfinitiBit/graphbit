name: CI Pipeline

on:
  push:
    branches: [ workflow/ci ]

permissions:
  contents: read
  actions: write
  id-token: write
  attestations: write

env:
  CARGO_TERM_COLOR: always
  PYTHONIOENCODING: utf-8
  RUST_BACKTRACE: 1

jobs:
  validation:
    name: Code Quality & Security Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-ci-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-ci-
          ${{ runner.os }}-cargo-

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python*/site-packages
        key: ${{ runner.os }}-python-ci-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-python-ci-
          ${{ runner.os }}-python-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 pylint pytest pytest-cov pytest-xdist maturin
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f python/requirements.txt ]; then pip install -r python/requirements.txt; fi

    - name: Install Rust tools
      run: |
        cargo install cargo-audit || echo "cargo-audit already installed or failed to install"
        cargo install cargo-tarpaulin || echo "cargo-tarpaulin already installed or failed to install"

    - name: Run Rust formatting check
      run: cargo fmt --all -- --check

    - name: Run Rust clippy
      run: cargo clippy --all-targets --all-features --jobs 2

    - name: Run Rust security audit
      run: cargo audit --quiet

    - name: Run Python linting
      run: |
        if [ -f pyproject.toml ]; then
          black --check .
          flake8 .
          pylint python/ || true
        fi

    - name: Run Rust tests
      run: cargo test --all-features --jobs 2 --jobs 2

    - name: Run Python tests
      run: |
        if [ -f pytest.ini ]; then
          pytest --cov=. --cov-report=xml --cov-report=html -n auto --maxfail=3
        else
          python -m pytest tests/ -n auto --maxfail=3 || true
        fi

    - name: Generate coverage report
      run: |
        cargo tarpaulin --out Xml --output-dir target/coverage --jobs 2 --timeout 300 || echo "Coverage generation failed"

    - name: Upload coverage to Codecov
      if: github.ref == 'refs/heads/workflow/ci'
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml,./target/coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-matrix:
    name: Test Suite
    needs: validation
    if: needs.validation.result == 'success'
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]
        exclude:
          # Optimize matrix for speed - exclude some combinations
          - os: windows-latest
            python-version: "3.12"
          - os: macos-latest
            python-version: "3.12"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-test-${{ matrix.python-version }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-test-${{ matrix.python-version }}-
          ${{ runner.os }}-cargo-test-
          ${{ runner.os }}-cargo-

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python*/site-packages
        key: ${{ runner.os }}-python${{ matrix.python-version }}-test-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-python${{ matrix.python-version }}-test-
          ${{ runner.os }}-python${{ matrix.python-version }}-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-xdist maturin
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f python/requirements.txt ]; then pip install -r python/requirements.txt; fi

    - name: Run Rust tests
      run: cargo test --all-features --jobs 2

    - name: Run Python tests
      run: |
        if [ -f pytest.ini ]; then
          pytest --cov=. --cov-report=xml -n auto --maxfail=3
        else
          python -m pytest tests/ -n auto --maxfail=3 || true
        fi

    - name: Upload test artifacts
      if: always() && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          .coverage
        if-no-files-found: ignore
        retention-days: 7

  build:
    name: Build Artifacts
    needs: validation
    if: needs.validation.result == 'success'
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform: linux-x64
            arch: x64
            packages: [appimage, deb, rpm]
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform: linux-arm64
            arch: arm64
            packages: [appimage, deb, rpm]
          
          # Windows builds
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows-x64
            arch: x64
            packages: [user, system]
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            platform: windows-arm64
            arch: arm64
            packages: [user, system]
          
          # macOS builds
          - os: macos-latest
            target: x86_64-apple-darwin
            platform: macos-x64
            arch: x64
            packages: [native]
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos-arm64
            arch: arm64
            packages: [native]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.target }}-
          ${{ runner.os }}-cargo-build-
          ${{ runner.os }}-cargo-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin build twine

    - name: Build Rust library
      run: |
        cargo build --release --target ${{ matrix.target }} --jobs 2

    - name: Build Python wheels
      run: |
        maturin build --release --target ${{ matrix.target }} --jobs 2

    - name: Build platform-specific packages
      run: |
        echo "Building packages for ${{ matrix.platform }} (${{ matrix.arch }})"
        echo "Package types: ${{ matrix.packages }}"
        
        # Create platform-specific build directory
        mkdir -p dist/${{ matrix.platform }}
        
        # Copy basic artifacts
        echo "Copying built artifacts to platform directory..."
        cp -r dist/*.whl dist/${{ matrix.platform }}/ 2>/dev/null || true
        cp -r dist/*.tar.gz dist/${{ matrix.platform }}/ 2>/dev/null || true
        cp target/${{ matrix.target }}/release/libgraphbit* dist/${{ matrix.platform }}/ 2>/dev/null || true
        
        # Create platform-specific packages
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          # Linux packages
          echo "Creating Linux packages for ${{ matrix.arch }}..."
          
          if [[ "${{ matrix.packages }}" == *"appimage"* ]]; then
            echo "Creating AppImage for ${{ matrix.arch }}..."
            # Add AppImage creation logic here
            touch dist/${{ matrix.platform }}/graphbit-${{ matrix.arch }}.AppImage
          fi
          
          if [[ "${{ matrix.packages }}" == *"deb"* ]]; then
            echo "Creating .deb package for ${{ matrix.arch }}..."
            # Add .deb creation logic here
            touch dist/${{ matrix.platform }}/graphbit-${{ matrix.arch }}.deb
          fi
          
          if [[ "${{ matrix.packages }}" == *"rpm"* ]]; then
            echo "Creating RPM package for ${{ matrix.arch }}..."
            # Add RPM creation logic here
            touch dist/${{ matrix.platform }}/graphbit-${{ matrix.arch }}.rpm
          fi
          
        elif [ "${{ matrix.os }}" = "windows-latest" ]; then
          # Windows packages
          echo "Creating Windows packages for ${{ matrix.arch }}..."
          
          if [[ "${{ matrix.packages }}" == *"user"* ]]; then
            echo "Creating Windows ${{ matrix.arch }} User package..."
            # Add Windows User package creation logic here
            touch dist/${{ matrix.platform }}/graphbit-${{ matrix.arch }}-user.msi
          fi
          
          if [[ "${{ matrix.packages }}" == *"system"* ]]; then
            echo "Creating Windows ${{ matrix.arch }} System package..."
            # Add Windows System package creation logic here
            touch dist/${{ matrix.platform }}/graphbit-${{ matrix.arch }}-system.msi
          fi
          
        elif [ "${{ matrix.os }}" = "macos-latest" ]; then
          # macOS packages
          echo "Creating macOS packages for ${{ matrix.arch }}..."
          
          if [[ "${{ matrix.packages }}" == *"native"* ]]; then
            echo "Creating Mac ${{ matrix.arch }} package..."
            # Add Mac native package creation logic here
            touch dist/${{ matrix.platform }}/graphbit-${{ matrix.arch }}.pkg
          fi
        fi

    - name: Generate build provenance
      uses: actions/attest-build-provenance@v1
      with:
        subject-path: |
          dist/*.whl
          dist/*.tar.gz
          target/release/libgraphbit*
          target/${{ matrix.target }}/release/libgraphbit*

    - name: Upload build artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          dist/
          target/release/libgraphbit*
          target/${{ matrix.target }}/release/libgraphbit*
        if-no-files-found: ignore
        retention-days: 30

    - name: Upload platform packages
      if: always() && matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: packages-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          dist/${{ matrix.platform }}/
        if-no-files-found: ignore
        retention-days: 30

  macos-universal:
    name: Build Mac Universal Package
    needs: [validation, build]
    if: needs.build.result == 'success' && github.ref == 'refs/heads/workflow/ci'
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download Mac x64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-macos-x64-x64
        path: ./macos-x64

    - name: Download Mac ARM64 artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-macos-arm64-arm64
        path: ./macos-arm64

    - name: Create Mac Universal package
      run: |
        echo "Creating Mac Universal package..."
        mkdir -p dist/macos-universal
        
        # Combine x64 and ARM64 libraries into universal binary
        if [ -f "./macos-x64/target/x86_64-apple-darwin/release/libgraphbit.dylib" ] && [ -f "./macos-arm64/target/aarch64-apple-darwin/release/libgraphbit.dylib" ]; then
          echo "Creating universal binary..."
          # Use lipo to create universal binary
          lipo -create \
            "./macos-x64/target/x86_64-apple-darwin/release/libgraphbit.dylib" \
            "./macos-arm64/target/aarch64-apple-darwin/release/libgraphbit.dylib" \
            -output "./dist/macos-universal/libgraphbit.dylib"
          
          echo "Universal binary created successfully"
        else
          echo "Warning: Could not find required libraries for universal binary"
        fi
        
        # Copy other artifacts
        cp -r ./macos-x64/dist/* ./dist/macos-universal/ 2>/dev/null || true
        cp -r ./macos-arm64/dist/* ./dist/macos-universal/ 2>/dev/null || true

    - name: Upload Mac Universal package
      uses: actions/upload-artifact@v4
      with:
        name: packages-macos-universal
        path: dist/macos-universal/
        if-no-files-found: ignore
        retention-days: 90

  ci-summary:
    name: CI Summary
    needs: [validation, test-matrix, build, macos-universal]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate CI summary
      run: |
        echo "## 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Validation status
        if [ "${{ needs.validation.result }}" = "success" ]; then
          echo "✅ **Validation**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Validation**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        # Test matrix status
        if [ "${{ needs.test-matrix.result }}" = "success" ]; then
          echo "✅ **Testing**: PASSED" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.test-matrix.result }}" = "skipped" ]; then
          echo "⏭️ **Testing**: SKIPPED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Testing**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        # Build status
        if [ "${{ needs.build.result }}" = "success" ]; then
          echo "✅ **Build**: PASSED" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.build.result }}" = "skipped" ]; then
          echo "⏭️ **Build**: SKIPPED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        # Mac Universal status
        if [ "${{ needs.macos-universal.result }}" = "success" ]; then
          echo "✅ **Mac Universal**: PASSED" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.macos-universal.result }}" = "skipped" ]; then
          echo "⏭️ **Mac Universal**: SKIPPED" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Mac Universal**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Pipeline Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: CI Pipeline" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

