name: Build and Publish to PyPI

# ============================================================================
# Purpose: Build wheels and source distribution, then publish to PyPI
#
# This workflow:
# - Builds wheels for all platforms (7 platforms x 4 Python versions = 28 wheels)
# - Builds source distribution (sdist)
# - Verifies all artifacts are present and correct
# - Publishes to TestPyPI FIRST (mandatory safety step)
# - Publishes to Production PyPI ONLY after TestPyPI succeeds
#
# PUBLICATION SEQUENCE (MANDATORY):
# 1. Build all 28 wheels (ALL must succeed)
# 2. Build sdist (must succeed)
# 3. Verify artifacts (must pass all checks)
# 4. Publish to TestPyPI (mandatory for tag triggers)
# 5. Publish to Production PyPI (only after TestPyPI succeeds)
#
# TRIGGERS:
# - Version tags (v0.5.0, v1.0.0, etc.) - Auto-publish to TestPyPI then PyPI
# - Manual workflow_dispatch - Optional publish with safety controls
#
# SAFETY FEATURES:
# - Sequential publication (TestPyPI ‚Üí Production PyPI)
# - All builds must succeed before any publication
# - Version validation (tag must match pyproject.toml)
# - Artifact count verification (28 wheels + 1 sdist)
# - PyPI version existence check (skip if already published)
# - TestPyPI validation before production
#
# SECRETS REQUIRED:
# - PYPI_API_TOKEN: PyPI API token for production uploads
# - TESTPYPI_API_TOKEN: TestPyPI API token (REQUIRED for tag triggers)
#
# NOTE: This workflow does NOT create GitHub releases automatically.
#       GitHub releases should be created manually if desired.
# ============================================================================

on:
  # Automatic trigger on version tags
  push:
    tags:
    - v*      # Matches v0.5.0, v1.0.0, etc.

  # Manual trigger with options
  workflow_dispatch:
    inputs:
      publish_to_pypi:
        description: Publish to production PyPI (will publish to TestPyPI first, then PyPI)
        required: false
        default: false
        type: boolean
      use_test_pypi_only:
        description: Publish to TestPyPI only (skip production PyPI)
        required: false
        default: false
        type: boolean
      artifact_retention_days:
        description: Number of days to retain artifacts (1-90)
        required: false
        default: '90'
        type: string
      skip_existing:
        description: Skip upload if version already exists on PyPI
        required: false
        default: true
        type: boolean

# Permissions
permissions:
  contents: read         # For checking out code
  id-token: write        # For artifact attestation and Trusted Publishers
  attestations: write    # For build provenance

# Environment variables
env:
  CARGO_TERM_COLOR: always
  PYTHONIOENCODING: utf-8
  RUST_BACKTRACE: 1

jobs:
  # ============================================================================
  # Job 1: Build Wheels for All Platforms
  # ============================================================================
  build-wheels:
    name: Build Wheel - ${{ matrix.platform.runner }} - ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.runner }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          # Linux (glibc) - Standard Linux distributions
        - runner: ubuntu-22.04
          target: x86_64
          manylinux: auto
        - runner: ubuntu-22.04
          target: aarch64
          manylinux: auto

          # Linux (musl) - Alpine Linux and minimal containers
        - runner: ubuntu-22.04
          target: x86_64
          manylinux: musllinux_1_2
        - runner: ubuntu-22.04
          target: aarch64
          manylinux: musllinux_1_2

          # Windows
        - runner: windows-latest
          target: x64
          manylinux: default

          # macOS (Intel)
        - runner: macos-13
          target: x86_64
          manylinux: default

          # macOS (Apple Silicon)
        - runner: macos-14
          target: aarch64
          manylinux: default

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-build-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.platform.target }}-
          ${{ runner.os }}-cargo-build-
          ${{ runner.os }}-cargo-

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.platform.target }}
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: ${{ matrix.platform.manylinux }}
        working-directory: python
        before-script-linux: |
          set -eux
          # Install OpenSSL development packages for glibc builds
          # musl builds will use vendored OpenSSL (configured in Cargo.toml)
          if command -v yum >/dev/null 2>&1; then
            # manylinux2014 / CentOS 7 family
            yum -y install openssl-devel
          elif command -v apt-get >/dev/null 2>&1; then
            # Debian/Ubuntu family
            apt-get update && apt-get install -y libssl-dev
          elif command -v apk >/dev/null 2>&1; then
            # musllinux (Alpine) - vendored OpenSSL will be used instead
            echo "Alpine/musl detected - using vendored OpenSSL from Cargo.toml"
          else
            echo "Unknown package manager. Skipping OpenSSL installation."
          fi

    - name: Verify wheel contents
      shell: bash
      run: |
        echo "üì¶ Built wheels:"
        ls -lh python/dist/

        echo ""
        echo "üîç Wheel details:"
        python -m pip install --upgrade pip wheel
        for wheel in python/dist/*.whl; do
          echo "Inspecting: $(basename $wheel)"
          python -m zipfile -l "$wheel" | head -20
          echo "---"
        done

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.target }}-${{ matrix.platform.manylinux }}
        path: python/dist/*.whl
        retention-days: ${{ inputs.artifact_retention_days || 90 }}
        if-no-files-found: error

    - name: Generate build attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: python/dist/*.whl

  # ============================================================================
  # Job 2: Build Source Distribution
  # ============================================================================
  build-sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-sdist-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-sdist-
          ${{ runner.os }}-cargo-

    - name: Build source distribution
      run: |
        cd python
        maturin sdist --out dist

    - name: Verify sdist contents
      run: |
        echo "üì¶ Built source distribution:"
        ls -lh python/dist/

        echo ""
        echo "üîç Sdist contents:"
        tar -tzf python/dist/*.tar.gz | head -30

    - name: Upload sdist artifact
      uses: actions/upload-artifact@v4
      with:
        name: wheels-sdist
        path: python/dist/*.tar.gz
        retention-days: ${{ inputs.artifact_retention_days || 90 }}
        if-no-files-found: error

    - name: Generate build attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: python/dist/*.tar.gz

  # ============================================================================
  # Job 3: Verify Artifacts (Safety Checks)
  # ============================================================================
  verify-artifacts:
    name: Verify Build Artifacts
    needs: [build-wheels, build-sdist]
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      wheel_count: ${{ steps.count.outputs.wheel_count }}
      sdist_count: ${{ steps.count.outputs.sdist_count }}
      verification_passed: ${{ steps.verify.outputs.passed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist-all

    - name: Collect all distribution files
      run: |
        mkdir -p dist
        find dist-all -name "*.whl" -exec cp {} dist/ \;
        find dist-all -name "*.tar.gz" -exec cp {} dist/ \;

        echo "üì¶ Collected distribution files:"
        ls -lh dist/

    - name: Extract version from tag or pyproject.toml
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          # Extract from git tag
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Version from tag: $VERSION"
        else
          # Extract from pyproject.toml
          VERSION=$(python -c "import tomllib; data = tomllib.load(open('python/pyproject.toml', 'rb')); print(data['project']['version'])")
          echo "Version from pyproject.toml: $VERSION"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Count artifacts
      id: count
      run: |
        WHEEL_COUNT=$(find dist -name "*.whl" | wc -l)
        SDIST_COUNT=$(find dist -name "*.tar.gz" | wc -l)

        echo "wheel_count=$WHEEL_COUNT" >> $GITHUB_OUTPUT
        echo "sdist_count=$SDIST_COUNT" >> $GITHUB_OUTPUT

        echo "üìä Artifact counts:"
        echo "  Wheels: $WHEEL_COUNT (expected: 28)"
        echo "  Sdist: $SDIST_COUNT (expected: 1)"

    - name: Verify artifact counts
      id: verify
      run: |
        WHEEL_COUNT=${{ steps.count.outputs.wheel_count }}
        SDIST_COUNT=${{ steps.count.outputs.sdist_count }}
        VERSION=${{ steps.version.outputs.version }}

        PASSED=true

        # Check wheel count
        if [ "$WHEEL_COUNT" -ne 28 ]; then
          echo "‚ùå ERROR: Expected 28 wheels, found $WHEEL_COUNT"
          PASSED=false
        else
          echo "‚úÖ Wheel count correct: 28"
        fi

        # Check sdist count
        if [ "$SDIST_COUNT" -ne 1 ]; then
          echo "‚ùå ERROR: Expected 1 sdist, found $SDIST_COUNT"
          PASSED=false
        else
          echo "‚úÖ Sdist count correct: 1"
        fi

        # Verify version in filenames
        echo ""
        echo "üîç Verifying version in filenames..."
        for file in dist/*; do
          filename=$(basename "$file")
          if [[ ! "$filename" =~ graphbit-$VERSION ]]; then
            echo "‚ùå ERROR: File $filename doesn't contain version $VERSION"
            PASSED=false
          fi
        done

        if [ "$PASSED" = true ]; then
          echo "‚úÖ All version checks passed"
        fi

        # Check for absolute paths in wheels
        echo ""
        echo "üîç Checking for absolute paths in wheels..."
        for wheel in dist/*.whl; do
          if python -m zipfile -l "$wheel" | grep -E "^[A-Z]:|^/home/|^/Users/"; then
            echo "‚ùå ERROR: Absolute path found in $(basename $wheel)"
            PASSED=false
          fi
        done

        if [ "$PASSED" = true ]; then
          echo "‚úÖ No absolute paths found in wheels"
        fi

        # Verify LICENSE.md and README.md in wheels
        echo ""
        echo "üîç Verifying LICENSE.md in wheels..."
        for wheel in dist/*.whl; do
          if ! python -m zipfile -l "$wheel" | grep -q "LICENSE.md"; then
            echo "‚ö†Ô∏è  WARNING: LICENSE.md not found in $(basename $wheel)"
          fi
        done

        echo "passed=$PASSED" >> $GITHUB_OUTPUT

        if [ "$PASSED" = false ]; then
          echo ""
          echo "‚ùå Verification failed! See errors above."
          exit 1
        fi

        echo ""
        echo "‚úÖ All verification checks passed!"

    - name: Upload verified distribution files
      uses: actions/upload-artifact@v4
      with:
        name: verified-dist
        path: dist/
        retention-days: ${{ inputs.artifact_retention_days || 90 }}
        if-no-files-found: error

    - name: Generate verification summary
      if: always()
      run: |
        echo "## üîç Artifact Verification" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.count.outputs.wheel_count }}" -eq 28 ]; then
          echo "| Wheel Count (28) | ‚úÖ Pass |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Wheel Count (28) | ‚ùå Fail (${{ steps.count.outputs.wheel_count }}) |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.count.outputs.sdist_count }}" -eq 1 ]; then
          echo "| Sdist Count (1) | ‚úÖ Pass |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Sdist Count (1) | ‚ùå Fail (${{ steps.count.outputs.sdist_count }}) |" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.verify.outputs.passed }}" = "true" ]; then
          echo "| Version Check | ‚úÖ Pass |" >> $GITHUB_STEP_SUMMARY
          echo "| Absolute Paths | ‚úÖ None Found |" >> $GITHUB_STEP_SUMMARY
          echo "| Overall | ‚úÖ **PASSED** |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Overall | ‚ùå **FAILED** |" >> $GITHUB_STEP_SUMMARY
        fi

  # ============================================================================
  # Job 4: Publish to TestPyPI (MANDATORY for tag triggers, optional for manual)
  # ============================================================================
  # This job MUST succeed before Production PyPI publication
  # For tag triggers: Always runs (TestPyPI-first approach)
  # For manual triggers: Runs if use_test_pypi_only=true OR publish_to_pypi=true
  # ============================================================================
  publish-testpypi:
    name: Publish to TestPyPI
    needs: [build-wheels, build-sdist, verify-artifacts]
    if: |
      (startsWith(github.ref, 'refs/tags/v') || inputs.use_test_pypi_only == true || inputs.publish_to_pypi == true) &&
      needs.build-wheels.result == 'success' &&
      needs.build-sdist.result == 'success' &&
      needs.verify-artifacts.result == 'success' &&
      needs.verify-artifacts.outputs.verification_passed == 'true'
    runs-on: ubuntu-latest
    # Uncomment to require manual approval:
    # environment: testpypi

    steps:
    - name: Safety Notice - TestPyPI First
      run: |
        echo "üõ°Ô∏è SAFETY STEP: Publishing to TestPyPI first"
        echo ""
        echo "This is a mandatory safety step before Production PyPI publication."
        echo "TestPyPI allows us to:"
        echo "  - Verify package metadata displays correctly"
        echo "  - Test installation process"
        echo "  - Catch any issues before production"
        echo ""
        echo "Production PyPI publication will ONLY proceed if this step succeeds."

    - name: Download verified distribution files
      uses: actions/download-artifact@v4
      with:
        name: verified-dist
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TESTPYPI_API_TOKEN }}
        skip-existing: ${{ inputs.skip_existing }}
        verbose: true
        print-hash: true

    - name: Verify TestPyPI upload
      run: |
        VERSION=${{ needs.verify-artifacts.outputs.version }}
        echo "‚è≥ Waiting for TestPyPI to process the upload..."
        sleep 30

        echo "‚úÖ Package uploaded to TestPyPI"
        echo "üîó View at: https://test.pypi.org/project/graphbit/$VERSION/"
        echo ""
        echo "To test installation:"
        echo "  pip install --index-url https://test.pypi.org/simple/ graphbit==$VERSION"

    - name: Generate TestPyPI summary
      run: |
        echo "## üì¶ TestPyPI Publication" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Published** - Version ${{ needs.verify-artifacts.outputs.version }} uploaded to TestPyPI" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üîó [View on TestPyPI](https://test.pypi.org/project/graphbit/${{ needs.verify-artifacts.outputs.version }}/)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üß™ Test Installation" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "pip install --index-url https://test.pypi.org/simple/ graphbit==${{ needs.verify-artifacts.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # Job 5: Publish to Production PyPI (ONLY after TestPyPI succeeds)
  # ============================================================================
  # This job REQUIRES TestPyPI publication to succeed first
  # For tag triggers: Runs after TestPyPI succeeds
  # For manual triggers: Runs if publish_to_pypi=true AND TestPyPI succeeded
  # Skipped if: use_test_pypi_only=true (TestPyPI-only mode)
  # ============================================================================
  publish-pypi:
    name: Publish to PyPI
    needs: [build-wheels, build-sdist, verify-artifacts, publish-testpypi]
    if: |
      (startsWith(github.ref, 'refs/tags/v') || inputs.publish_to_pypi == true) &&
      inputs.use_test_pypi_only != true &&
      needs.build-wheels.result == 'success' &&
      needs.build-sdist.result == 'success' &&
      needs.verify-artifacts.result == 'success' &&
      needs.verify-artifacts.outputs.verification_passed == 'true' &&
      needs.publish-testpypi.result == 'success'
    runs-on: ubuntu-latest
    # Uncomment to require manual approval for production releases:
    # environment: pypi-production

    steps:
    - name: Confirm TestPyPI Success
      run: |
        echo "‚úÖ SAFETY CHECKPOINT PASSED"
        echo ""
        echo "TestPyPI publication succeeded!"
        echo "All safety checks passed:"
        echo "  ‚úÖ All 28 wheels built successfully"
        echo "  ‚úÖ Source distribution built successfully"
        echo "  ‚úÖ Artifact verification passed"
        echo "  ‚úÖ TestPyPI publication succeeded"
        echo ""
        echo "Proceeding with Production PyPI publication..."

    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Download verified distribution files
      uses: actions/download-artifact@v4
      with:
        name: verified-dist
        path: dist/

    - name: Verify version matches tag (if triggered by tag)
      if: startsWith(github.ref, 'refs/tags/v')
      run: |
        TAG_VERSION=${GITHUB_REF#refs/tags/v}
        PACKAGE_VERSION=${{ needs.verify-artifacts.outputs.version }}

        echo "Tag version: $TAG_VERSION"
        echo "Package version: $PACKAGE_VERSION"

        if [ "$TAG_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "‚ùå ERROR: Tag version ($TAG_VERSION) doesn't match package version ($PACKAGE_VERSION)"
          exit 1
        fi

        echo "‚úÖ Version verification passed"

    - name: Check if version already exists on PyPI
      id: check_version
      run: |
        VERSION=${{ needs.verify-artifacts.outputs.version }}
        echo "Checking if graphbit version $VERSION exists on PyPI..."

        # Check PyPI for existing version
        if python -c "
        import urllib.request
        import json
        try:
            with urllib.request.urlopen('https://pypi.org/pypi/graphbit/json', timeout=10) as response:
                data = json.loads(response.read())
                versions = list(data['releases'].keys())
                if '$VERSION' in versions:
                    print('exists=true')
                    exit(0)
        except Exception:
            pass
        print('exists=false')
        " > version_check.txt; then
          VERSION_EXISTS=$(cat version_check.txt)
          echo "$VERSION_EXISTS" >> $GITHUB_OUTPUT

          if [ "$VERSION_EXISTS" = "exists=true" ]; then
            echo "‚ö†Ô∏è  Version $VERSION already exists on PyPI"
            if [ "${{ inputs.skip_existing }}" = "true" ]; then
              echo "Skipping upload (skip_existing=true)"
            else
              echo "‚ùå ERROR: Version already exists and skip_existing=false"
              exit 1
            fi
          else
            echo "‚úÖ Version $VERSION is new, proceeding with upload"
          fi
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "‚úÖ Could not check PyPI, assuming version is new"
        fi

    - name: Generate build attestation
      if: steps.check_version.outputs.exists != 'exists=true'
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: dist/*

    - name: Publish to PyPI
      if: steps.check_version.outputs.exists != 'exists=true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: ${{ inputs.skip_existing }}
        verbose: true
        print-hash: true

    - name: Verify PyPI upload
      if: steps.check_version.outputs.exists != 'exists=true'
      run: |
        VERSION=${{ needs.verify-artifacts.outputs.version }}
        echo "‚è≥ Waiting for PyPI to process the upload..."
        sleep 30

        echo "Verifying package is available on PyPI..."
        if pip index versions graphbit 2>/dev/null | grep -q "$VERSION"; then
          echo "‚úÖ Package successfully uploaded to PyPI"
        else
          echo "‚ö†Ô∏è  Package may still be processing on PyPI"
        fi

    - name: Generate PyPI publication summary
      if: always()
      run: |
        echo "## üì¶ PyPI Publication" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.check_version.outputs.exists }}" = "exists=true" ]; then
          echo "‚è≠Ô∏è  **Skipped** - Version ${{ needs.verify-artifacts.outputs.version }} already exists on PyPI" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ **Published** - Version ${{ needs.verify-artifacts.outputs.version }} uploaded to PyPI" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó [View on PyPI](https://pypi.org/project/graphbit/${{ needs.verify-artifacts.outputs.version }}/)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üì• Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pip install graphbit==${{ needs.verify-artifacts.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi

  # ============================================================================
  # Job 6: Workflow Summary (Always runs)
  # ============================================================================
  workflow-summary:
    name: Workflow Summary
    needs: [build-wheels, build-sdist, verify-artifacts, publish-testpypi, publish-pypi]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Generate comprehensive workflow summary
      run: |
        echo "# üéØ Build and Publish Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ needs.verify-artifacts.outputs.version || 'N/A' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "## üìä Job Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY

        # Build Wheels
        if [ "${{ needs.build-wheels.result }}" = "success" ]; then
          echo "| üî® Build Wheels | ‚úÖ Success (7 platforms) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üî® Build Wheels | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        # Build Sdist
        if [ "${{ needs.build-sdist.result }}" = "success" ]; then
          echo "| üì¶ Source Distribution | ‚úÖ Success |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üì¶ Source Distribution | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        # Verify Artifacts
        if [ "${{ needs.verify-artifacts.result }}" = "success" ]; then
          echo "| üîç Verify Artifacts | ‚úÖ Passed |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üîç Verify Artifacts | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        # TestPyPI (MANDATORY for tag triggers)
        if [ "${{ needs.publish-testpypi.result }}" = "success" ]; then
          echo "| üß™ TestPyPI Publication (Safety Step) | ‚úÖ Published |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.publish-testpypi.result }}" = "skipped" ]; then
          echo "| üß™ TestPyPI Publication (Safety Step) | ‚è≠Ô∏è  Skipped |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üß™ TestPyPI Publication (Safety Step) | ‚ùå Failed (blocks Production) |" >> $GITHUB_STEP_SUMMARY
        fi

        # PyPI (ONLY after TestPyPI succeeds)
        if [ "${{ needs.publish-pypi.result }}" = "success" ]; then
          echo "| üöÄ PyPI Publication (After TestPyPI) | ‚úÖ Published |" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.publish-pypi.result }}" = "skipped" ]; then
          echo "| üöÄ PyPI Publication (After TestPyPI) | ‚è≠Ô∏è  Skipped |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| üöÄ PyPI Publication (After TestPyPI) | ‚ùå Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY

        # Overall status with sequential publication info
        if [ "${{ needs.build-wheels.result }}" = "success" ] && \
           [ "${{ needs.build-sdist.result }}" = "success" ] && \
           [ "${{ needs.verify-artifacts.result }}" = "success" ]; then
          echo "## ‚úÖ Workflow Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.publish-pypi.result }}" = "success" ]; then
            echo "üéâ **Package published to Production PyPI!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Publication Sequence:**" >> $GITHUB_STEP_SUMMARY
            echo "1. ‚úÖ Built all 28 wheels + sdist" >> $GITHUB_STEP_SUMMARY
            echo "2. ‚úÖ Verified all artifacts" >> $GITHUB_STEP_SUMMARY
            echo "3. ‚úÖ Published to TestPyPI (safety step)" >> $GITHUB_STEP_SUMMARY
            echo "4. ‚úÖ Published to Production PyPI" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Install with: \`pip install graphbit==${{ needs.verify-artifacts.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.publish-testpypi.result }}" = "success" ]; then
            echo "üß™ **Package published to TestPyPI only!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Production PyPI publication was skipped (use_test_pypi_only=true)" >> $GITHUB_STEP_SUMMARY
          else
            echo "üì¶ **Artifacts built successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Download artifacts from the workflow run to test locally." >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "## ‚ö†Ô∏è  Workflow Completed with Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Some jobs failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.publish-testpypi.result }}" = "failure" ]; then
            echo "‚ùå **TestPyPI publication failed - Production PyPI blocked**" >> $GITHUB_STEP_SUMMARY
          fi
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Generated by Build and Publish Workflow*" >> $GITHUB_STEP_SUMMARY
