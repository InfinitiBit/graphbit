name: Build Distribution Artifacts

# ============================================================================
# Purpose: Build wheels and source distribution for all platforms
#
# SAFE TO RUN: This workflow ONLY builds artifacts. It does NOT:
# - Validate code (no cargo fmt, no clippy)
# - Run tests (no pytest, no cargo test)
# - Publish to PyPI or any package registry
# - Create GitHub releases
# - Modify any files in the repository
# - Create or modify git tags
# - Update version numbers
# - Create or modify release notes
# - Make any commits
# - Have ANY side effects on repository state
#
# OUTPUTS: Only creates downloadable build artifacts (wheels + sdist)
#
# Use this workflow to:
# - Quickly generate artifacts for all platforms
# - Test build process without full CI/CD
# - Prepare artifacts for manual inspection
# - Generate wheels for local testing
# - Debug platform-specific build issues
#
# TRIGGER: Manual only - runs on the branch you select when triggering
# ============================================================================

on:
  # Manual trigger ONLY - no automatic triggers
  # This workflow runs on whichever branch you select when manually triggering
  workflow_dispatch:
    inputs:
      artifact_retention_days:
        description: Number of days to retain artifacts (1-90)
        required: false
        default: '7'
        type: string

  # Automatic triggers are DISABLED to prevent accidental runs
  # If you want automatic triggers, uncomment the following:
  # push:
  #   branches:
  #     - 'build-test/**'
  #     - 'artifact-test/**'

# Permissions for artifact attestation
permissions:
  contents: read
  id-token: write
  attestations: write

# Environment variables
env:
  CARGO_TERM_COLOR: always
  PYTHONIOENCODING: utf-8
  RUST_BACKTRACE: 1

jobs:
  # ============================================================================
  # Job 1: Build Wheels for All Platforms
  # ============================================================================
  build-wheels:
    name: Build Wheel - ${{ matrix.platform.runner }} - ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.runner }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          # Linux (glibc) - Standard Linux distributions
        - runner: ubuntu-22.04
          target: x86_64
          manylinux: auto
        - runner: ubuntu-22.04
          target: aarch64
          manylinux: auto

          # Linux (musl) - Alpine Linux and minimal containers
        - runner: ubuntu-22.04
          target: x86_64
          manylinux: musllinux_1_2
        - runner: ubuntu-22.04
          target: aarch64
          manylinux: musllinux_1_2

          # Windows
        - runner: windows-latest
          target: x64
          manylinux: default

          # macOS (Intel)
        - runner: macos-13
          target: x86_64
          manylinux: default

          # macOS (Apple Silicon)
        - runner: macos-14
          target: aarch64
          manylinux: default

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-build-${{ matrix.platform.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-${{ matrix.platform.target }}-
          ${{ runner.os }}-cargo-build-
          ${{ runner.os }}-cargo-

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.platform.target }}
        args: --release --out dist --find-interpreter
        sccache: 'true'
        manylinux: ${{ matrix.platform.manylinux }}
        working-directory: python
        before-script-linux: |
          set -eux
          # Install OpenSSL development packages for glibc builds
          # musl builds will use vendored OpenSSL (configured in Cargo.toml)
          if command -v yum >/dev/null 2>&1; then
            # manylinux2014 / CentOS 7 family
            yum -y install openssl-devel
          elif command -v apt-get >/dev/null 2>&1; then
            # Debian/Ubuntu family
            apt-get update && apt-get install -y libssl-dev
          elif command -v apk >/dev/null 2>&1; then
            # musllinux (Alpine) - vendored OpenSSL will be used instead
            echo "Alpine/musl detected - using vendored OpenSSL from Cargo.toml"
          else
            echo "Unknown package manager. Skipping OpenSSL installation."
          fi

    - name: Verify wheel contents
      shell: bash
      run: |
        echo "📦 Built wheels:"
        ls -lh python/dist/

        echo ""
        echo "🔍 Wheel details:"
        python -m pip install --upgrade pip wheel
        for wheel in python/dist/*.whl; do
          echo "Inspecting: $(basename $wheel)"
          python -m zipfile -l "$wheel" | head -20
          echo "---"
        done

    - name: Upload wheel artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.platform.runner }}-${{ matrix.platform.target }}-${{ matrix.platform.manylinux }}
        path: python/dist/*.whl
        retention-days: ${{ inputs.artifact_retention_days || 7 }}
        if-no-files-found: error

    - name: Generate build attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: python/dist/*.whl

  # ============================================================================
  # Job 2: Build Source Distribution
  # ============================================================================
  build-sdist:
    name: Build Source Distribution
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install maturin

    - name: Cache Rust dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-sdist-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-sdist-
          ${{ runner.os }}-cargo-

    - name: Build source distribution
      run: |
        cd python
        maturin sdist --out dist

    - name: Verify sdist contents
      run: |
        echo "📦 Built source distribution:"
        ls -lh python/dist/

        echo ""
        echo "🔍 Sdist contents:"
        tar -tzf python/dist/*.tar.gz | head -30

    - name: Upload sdist artifact
      uses: actions/upload-artifact@v4
      with:
        name: wheels-sdist
        path: python/dist/*.tar.gz
        retention-days: ${{ inputs.artifact_retention_days || 7 }}
        if-no-files-found: error

    - name: Generate build attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-path: python/dist/*.tar.gz

  # ============================================================================
  # Job 3: Build Summary (Always runs to provide artifact overview)
  # ============================================================================
  build-summary:
    name: Build Summary
    needs: [build-wheels, build-sdist]
    if: always()
    runs-on: ubuntu-latest

    steps:
    - name: Download all artifacts for summary
      uses: actions/download-artifact@v4
      with:
        path: all-artifacts

    - name: Generate build summary
      run: |
        echo "# 🎯 Build Artifacts Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Ref**: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "## 📊 Job Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY

        # Build Wheels
        if [ "${{ needs.build-wheels.result }}" = "success" ]; then
          echo "| 🔨 Build Wheels | ✅ Success (7 platforms) |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 🔨 Build Wheels | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        # Build sdist
        if [ "${{ needs.build-sdist.result }}" = "success" ]; then
          echo "| 📦 Source Distribution | ✅ Success |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| 📦 Source Distribution | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY

        # Artifact details
        echo "## 📦 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ -d "all-artifacts" ]; then
          echo "### Artifact Breakdown" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

          total_size=0
          wheel_count=0

          for artifact_dir in all-artifacts/*/; do
            if [ -d "$artifact_dir" ]; then
              artifact_name=$(basename "$artifact_dir")
              echo "📁 $artifact_name:" >> $GITHUB_STEP_SUMMARY

              for file in "$artifact_dir"*; do
                if [ -f "$file" ]; then
                  filename=$(basename "$file")
                  size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
                  size_mb=$(echo "scale=2; $size / 1048576" | bc 2>/dev/null || echo "N/A")

                  echo "  - $filename (${size_mb} MB)" >> $GITHUB_STEP_SUMMARY

                  total_size=$((total_size + size))

                  if [[ "$filename" == *.whl ]]; then
                    wheel_count=$((wheel_count + 1))
                  fi
                fi
              done
              echo "" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          total_size_mb=$(echo "scale=2; $total_size / 1048576" | bc 2>/dev/null || echo "N/A")

          echo "### Summary Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Wheels**: $wheel_count" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Size**: ${total_size_mb} MB" >> $GITHUB_STEP_SUMMARY
          echo "- **Retention**: ${{ inputs.artifact_retention_days || 7 }} days" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️  No artifacts found" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY

        # Overall status
        if [ "${{ needs.build-wheels.result }}" = "success" ] && \
           [ "${{ needs.build-sdist.result }}" = "success" ]; then
          echo "## ✅ Build Completed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All artifacts have been built and are ready for download!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 How to Download" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Scroll to the **Artifacts** section at the bottom of this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on any artifact to download" >> $GITHUB_STEP_SUMMARY
          echo "3. Extract the downloaded ZIP file to access the wheels" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ⚠️  Build Completed with Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Some build jobs failed. Please review the logs above." >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "*Generated by Build Artifacts Only Workflow*" >> $GITHUB_STEP_SUMMARY
