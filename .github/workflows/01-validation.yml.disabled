name: 01 - Validation

on:
  push:
    branches: [ main, develop, master ]
    tags: [ '*' ]
  pull_request:
    branches: [ main, develop, master ]
  workflow_dispatch:
    inputs:
      skip_cache:
        description: 'Skip cache and run fresh validation'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      skip_cache:
        description: 'Skip cache and run fresh validation'
        required: false
        default: false
        type: boolean
    outputs:
      validation_status:
        description: 'Overall validation status'
        value: ${{ jobs.validation.outputs.status }}
      validation_artifacts:
        description: 'Validation artifacts path'
        value: ${{ jobs.validation.outputs.artifacts }}

permissions:
  contents: read
  actions: write
  pull-requests: write
  issues: write
  id-token: write
  attestations: write

env:
  CARGO_TERM_COLOR: always
  PYTHONIOENCODING: utf-8
  RUST_BACKTRACE: 1

jobs:
  validation:
    name: Code Quality & Security Validation
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.validation.outputs.status }}
      artifacts: ${{ steps.validation.outputs.artifacts }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Cache Rust dependencies
      if: ${{ !inputs.skip_cache }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target/
        key: ${{ runner.os }}-cargo-validation-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-validation-
          ${{ runner.os }}-cargo-

    - name: Cache Python dependencies
      if: ${{ !inputs.skip_cache }}
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/lib/python*/site-packages
        key: ${{ runner.os }}-python-validation-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-python-validation-
          ${{ runner.os }}-python-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 pylint pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f python/requirements.txt ]; then pip install -r python/requirements.txt; fi

    - name: Install Rust tools
      run: |
        cargo install cargo-audit || echo "cargo-audit already installed or failed to install"
        cargo install cargo-tarpaulin || echo "cargo-tarpaulin already installed or failed to install"

    - name: Initialize workflow orchestrator
      run: |
        python scripts/workflow-orchestrator.py start --phase validation

    - name: Run comprehensive validation
      id: validation
      run: |
        echo "Starting validation phase..."

        # Run validation with our script
        if python scripts/validation-runner.py --root . ; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Validation completed successfully"

          # Mark phase as complete
          python scripts/workflow-orchestrator.py complete --phase validation --success
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "Validation failed"

          # Mark phase as failed
          python scripts/workflow-orchestrator.py complete --phase validation --error "Validation checks failed"
          exit 1
        fi

        # Set artifacts output
        echo "artifacts=.github/artifacts" >> $GITHUB_OUTPUT

    - name: Upload validation artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: validation-artifacts-${{ github.run_id }}
        path: |
          .github/artifacts/validation-report-*.json
          .github/workflow-status.json
        retention-days: 30

    - name: Generate validation summary
      if: always()
      run: |
        echo "## üîç Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.validation.outputs.status }}" = "success" ]; then
          echo "‚úÖ **All validation checks passed!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Validation checks failed**" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Validation Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow**: 01-validation" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ steps.validation.outputs.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Artifacts**: ${{ steps.validation.outputs.artifacts }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY

        # Show pipeline status
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Pipeline Status" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        python scripts/workflow-orchestrator.py status >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ steps.validation.outputs.status }}';
          const runId = '${{ github.run_id }}';

          const statusIcon = status === 'success' ? '‚úÖ' : '‚ùå';
          const statusText = status === 'success' ? 'PASSED' : 'FAILED';

          const body = `## ${statusIcon} Validation ${statusText}

          **Workflow**: 01-validation
          **Status**: ${status}
          **Run ID**: ${runId}

          ${status === 'success'
            ? 'All validation checks passed! ‚ú®'
            : 'Some validation checks failed. Please review the logs and fix any issues.'}

          [View detailed results](https://github.com/${{ github.repository }}/actions/runs/${runId})`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  trigger-next-phase:
    name: Trigger Testing Phase
    needs: validation
    if: needs.validation.outputs.status == 'success' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Trigger testing workflow
      uses: actions/github-script@v7
      with:
        script: |
          const result = await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: '02-testing.yml',
            ref: context.ref,
            inputs: {
              triggered_by: 'validation',
              validation_run_id: '${{ github.run_id }}'
            }
          });

          console.log('Triggered testing workflow:', result.status);

    - name: Update pipeline status
      run: |
        echo "Validation phase completed successfully"
        echo "Next phase: Testing"
        echo "Triggered testing workflow for ref: ${{ github.ref }}"
